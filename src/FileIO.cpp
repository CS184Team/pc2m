#include "FileIO.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include "Vector.h"


void FileIO::readTxt(char *ifile, Cloud &vertices) {
	std::string line;
	std::ifstream ifs(ifile);
	ifs.unsetf(std::ios_base::skipws);
	int line_count = std::count(std::istream_iterator<char>(ifs), std::istream_iterator<char>(), '\n');
	ifs.clear();
	ifs.seekg(0, ifs.beg);
	vertices.reserve(line_count);
    #ifdef TEST_DEBUG
    std::cout << "[FileIO] #lines in " << ifile << ": " << line_count << std::endl;
    int line_mod = (int) (line_count / 20.0);
    #endif
	if (ifs.is_open()) {
		int index = 0;
		while (getline(ifs, line)) {
			#ifdef TEST_DEBUG
			if (index % line_mod == 0) {
				std::cout << "[FileIO] " << (int) (index * 100.0 / line_count) << "%" << " " << index << std::endl;
			}
			#endif
			std::istringstream iss(line);
			double x, y, z, nx, ny, nz;
			iss >> x;
			iss >> y;
			iss >> z;
			iss >> nx;
			iss >> ny;
			iss >> nz;
			Vector *position = new Vector(x, y, z);
			Vector *normal = new Vector(nx, ny, nz);
			#ifdef TEST_DEBUG
			assert abs(normal.norm() - 1.0) < 0.001;
			#endif
			Vertex *vertex = new Vertex(index, *position, *normal);
			vertices.push_back(vertex);
			++index;
		}
		ifs.close();
  	}
}

void FileIO::writePly(char *ofile, const Cloud &vertices, const std::vector<Facet *> &facets) {
	std::cout << "[34]" << std::endl;
	std::ofstream ofs(ofile);
	std::cout << "[36]" << std::endl;
	ofs << "ply" << std::endl;
	ofs << "format ascii 1.0" << std::endl;
	ofs << "comment generated by PC2M" << std::endl;
	ofs << "element vertex " << vertices.size() << std::endl;
	ofs << "property float x" << std::endl;
	ofs << "property float y" << std::endl;
	ofs << "property float z" << std::endl;
	ofs << "element face " << facets.size() << std::endl;
	ofs << "property list uchar int vertex_indices" << std::endl;
	ofs << "end_header" << std::endl;
	for (auto vertex : vertices) {
		ofs << vertex->x() << " " << vertex->y() << " " << vertex->z() << std::endl;
	}
	for (auto facet : facets) {
		ofs << 3 << " " << facet->va.index << " " << facet->vb.index << " " << facet->vc.index << std::endl;
	}
	ofs.close();
}

// int main(int argc, char **argv) {
// 	if (argc < 3) {
// 		printf("Usage:\n\t./FileIO <input.txt> <output.ply>\n");
// 		return 1;
// 	}

// 	FileIO fileIO;
// 	std::vector<Vertex *> vertices;
// 	fileIO.readTxt(argv[1], vertices);

// 	Facet *f1 = new Facet(*(vertices[0]), *(vertices[1]), *(vertices[2]), NULL, NULL, NULL);
// 	Facet *f2 = new Facet(*(vertices[3]), *(vertices[2]), *(vertices[1]), NULL, NULL, NULL);
// 	std::vector<Facet *> facets;
// 	facets.push_back(f1);
// 	facets.push_back(f2);
// 	fileIO.writePly(argv[2], vertices, facets);
// }